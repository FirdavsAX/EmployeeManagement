@using EmployeeManagement.Models.Authorization;
@model IEnumerable<EmployeeManagement.ViewModels.UserViewModel>

<div class="container mt-5">
    <h3 class="text-center mb-4">User Management</h3>

    @Html.AntiForgeryToken()

    <div class="card shadow-sm">
        <div class="card-body">
                <div class="d-flex justify-content-between mb-3">
                    <div>
                        <!-- Block Button with Red Color -->
                        <button class="btn btn-danger" id="bulkBlock" onclick="confirmAction('block')">
                            Block Selected
                        </button>

                        <!-- Unblock Button with Icon -->
                        <button class="btn btn-success" id="bulkUnblock" onclick="confirmAction('unblock')">
                            <i class="fas fa-unlock"></i> <!-- Unlock Icon -->
                            Unblock Selected
                        </button>

                        <!-- Delete Button with Icon -->
                        <button class="btn btn-secondary" id="bulkDelete" onclick="confirmAction('delete')">
                            <i class="fas fa-trash-alt"></i> <!-- Trash Icon -->
                            Delete Selected
                        </button>
                </div>

            </div>
            <table class="table table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" onclick="toggleSelection(this)"></th>
                        <th>ID</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Last Login</th>
                        <th>Registered</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td><input type="checkbox" class="user-checkbox" value="@user.Id"></td>
                            <td>@user.Id</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>@user.LastLoginDate.ToString("g")</td>
                            <td>@user.RegisteredDate.ToString("g")</td>
                            <td>
                                <span class="badge @(user.Status == Status.UnBlocked ? "bg-success" : "bg-danger")">
                                    @(user.Status == Status.UnBlocked ? "Active" : "Blocked")
                                </span>
                            </td>
                         
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to <span id="actionType"></span> the selected users?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmActionButton">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Select or deselect all checkboxes
    function toggleSelection(selectAllCheckbox) {
        const checkboxes = document.querySelectorAll('.user-checkbox');
        checkboxes.forEach(checkbox => checkbox.checked = selectAllCheckbox.checked);
    }

    // Get selected users' IDs
    function getSelectedUsers() {
        const selected = [];
        document.querySelectorAll('.user-checkbox:checked').forEach(checkbox => {
            selected.push(checkbox.value);
        });
        return selected;
    }

    // Confirm the bulk action (block, unblock, delete)
    function confirmAction(action) {
        const selectedUsers = getSelectedUsers();
        if (selectedUsers.length === 0) {
            alert('Please select at least one user.');
            return;
        }

        // Set the action type in the modal
        document.getElementById('actionType').innerText = action;

        // Show the modal
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
        confirmModal.show();

        // Set up the action on confirmation
        document.getElementById('confirmActionButton').onclick = function () {
            performBulkAction(action, selectedUsers);
        };
    }

    function performBulkAction(action, userIds) {
        const url = getActionUrl(action);
        if (!url) {
            alert('Invalid action.');
            return;
        }

        console.log('Selected User IDs:', userIds); // Debugging line

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(userIds) // Send selected user IDs
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to perform action.');
                }
            })
            .then(result => {
                alert(`Users have been ${action}ed successfully.`);
                location.reload();
            })
            .catch(error => {
                alert(error.message);
            });

        const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
        confirmModal.hide();
    }


    // Get the appropriate action URL based on the action type
    function getActionUrl(action) {
        switch (action) {
            case 'block':
                return '@Url.Action("BlockUser", "Home")';
            case 'unblock':
                return '@Url.Action("UnblockUser", "Home")';
            case 'delete':
                return '@Url.Action("DeleteUser", "Home")';
            default:
                return null;
        }
    }

    // Placeholder for exporting users (implement as needed)
    function exportUsers() {
        alert('Exporting users...');
    }
</script>
